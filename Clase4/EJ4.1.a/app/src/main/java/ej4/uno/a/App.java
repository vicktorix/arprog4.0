/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ej4.uno.a;

public class App {
    private static String error0 = "App.class es un programa para ordenar 3 números de manera ascendente o descendente\n\n"
            +
            "Uso: java App.class [nr1] [nr2] [nr3] [orden]\n\n" +
            "nr1, nr2, nr3:\n\t" +
            "Números enteros o flotantes\n" +
            "Orden:\n\t" +
            "-asc\tOrden ascendente\n\t" +
            "-desc\tOrden descendente\n\n" +
            "Ejemplo:\n\tjava App.class 34 5 78 --desc\n";

    private static String error1 = "Error en los argumentos de comando para más información use \n java app.class --help";

    private static String ordenAscendente = "--asc";
    private static String ordenDescendente = "--desc";

    public static boolean ASCENDENTE = true;
    public static boolean DESCENDENTE = false;

    public static void showError(int error) {
        switch (error) {
            case 0:
                System.out.println(error0);
                break;
            case 1:
                System.out.println(error1);
                break;
        }

    }

    public static void main(String[] args) {

        if (args[0].equals("--help")) {
            showError(0);
        } else if (args.length != 4) {
            showError(1);
        } else {
            try {
                float[] numeros = new float[3];
                for (int i = 0; i < args.length - 1; i++) {
                    numeros[i] = Float.parseFloat(args[i]);
                }

                String orden = args[3];
                if (!(orden.equals(ordenAscendente) || orden.equals(ordenDescendente))) {
                    showError(1);
                } else {
                    if (orden.equals(ordenAscendente)) {
                        mostrarVector(ordenarVector(numeros, ASCENDENTE));
                    } else {
                        mostrarVector(ordenarVector(numeros, DESCENDENTE));
                    }
                }

            } catch (Exception e) {
                showError(1);
            }
            ;
        }
    }

    public static void mostrarVector(float[] vector) {
        System.out.print("[");
        for (int i = 0; i < vector.length; i++) {
            System.out.print(String.format("%s", vector[i]));
            if (i < vector.length - 1) {
                System.out.print(",");
            }
        }
        System.out.println("]");
    }

    // Ordena un vector por el método de insersión
    public static float[] ordenarVector(float[] vector, boolean orden) {
        float tempValue = 0;
        int tempPos = 0;

        for (int i = 0; i < vector.length; i++) {
            tempValue = vector[i];
            tempPos = i;

            while (tempPos > 0 &&
                    ((vector[tempPos - 1] > tempValue && orden) ||
                            (vector[tempPos - 1] < tempValue && !orden))) {
                vector[tempPos] = vector[tempPos - 1];
                tempPos -= 1;
            }
            vector[tempPos] = tempValue;
        }

        return vector;
    }

}
